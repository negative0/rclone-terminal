{"version":3,"sources":["utils.js","extenstions/rclone.js","extenstions/clear.js","App.js","serviceWorker.js","index.js"],"names":["convertToHTML","text","addToArrayImmutable","array","value","rclone","history","setHistory","setIsLoading","exec","command","structure","cwd","args","opts","i","hasOwnProperty","isNaN","parseInt","arg","push","coreCommand","then","res","console","log","result","err","message","clearExt","App","useState","isLoading","terminalExtensions","clear","style","height","data-test","theme","Terminal","Themes","DARK","extensions","prefix","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"0SAEaA,EAAgB,SAACC,GAC1B,OAAQ,6BAAMA,IAGLC,EAAsB,SAACC,EAAOC,GACvC,MAAM,GAAN,mBAAWD,GAAX,CAAkB,CAACC,YCuCRC,EApCA,SAACC,EAASC,EAAYC,GACjC,MAAO,CACHC,KAAM,WAA4BC,GAAa,IAAvCC,EAAsC,EAAtCA,UAAWL,EAA2B,EAA3BA,QAASM,EAAkB,EAAlBA,IACxBJ,GAAa,GACb,IAAIK,EAAO,GACPC,EAAO,GAEX,IAAK,IAAIC,KAAKL,EAAQG,KAClB,GAAIH,EAAQG,KAAKG,eAAeD,GAAI,CAChC,GAAIE,MAAMC,SAASH,IAAK,CACpBD,EAAKC,GAAKL,EAAQG,KAAKE,GACvB,SAEJ,IAAII,EAAMT,EAAQG,KAAKE,GACvBF,EAAKO,KAAKD,GAiBlB,OAdAE,sBAAYR,EAAMC,GAAMQ,MAAK,SAAAC,GACzBC,QAAQC,IAAIF,GACZhB,EACIL,EAAoBI,EAASN,EAAcuB,EAAIG,UAEnDlB,GAAa,MAEd,SAAAmB,GACCpB,EACIL,EAAoBI,EAASN,EAAc,UAAD,OAAW2B,EAAIC,YAE7DpB,GAAa,MAGV,CAACG,YAAWC,MAAKN,cChCrBuB,EARE,SAACvB,EAASC,EAAYC,GACnC,MAAO,CACHC,KAAM,WAA8BC,GAAa,IAAxCC,EAAuC,EAAvCA,UAAuC,EAA5BL,QAChB,MAAO,CAAEK,YAAWC,IADwB,EAAnBA,IACAN,QAAS,OC4B/BwB,MA1Bf,WAAgB,IAAD,EAEmBC,mBAAS,CAAC,CAAE3B,MAAO,0BAFtC,mBAEJE,EAFI,KAEKC,EAFL,OAGuBwB,oBAAS,GAHhC,mBAGJC,EAHI,KAGOxB,EAHP,KAKLyB,EAAqB,CACvB5B,OAAQA,EAAOC,EAASC,EAAYC,GACpC0B,MAAOL,EAASvB,EAASC,EAAYC,IAGzC,OACI,yBAAK2B,MAAO,CAACC,OAAQ,QAASC,YAAU,gBACpC,kBAAC,IAAD,CACI/B,QAASA,EACTgC,MAAOC,IAASC,OAAOC,KACvBC,WAAYT,EACZU,OAAO,mBAEX,yBAAKC,UAAU,aACTZ,EAAY,aAAe,WCbzBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMjC,c","file":"static/js/main.e26086c8.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const convertToHTML = (text) => {\n    return (<pre>{text}</pre>);\n}\n\nexport const addToArrayImmutable = (array, value) => {\n    return [...array, {value}];\n}\n\nexport const findByTestAttr = (component, attr) => {\n    const wrapper = component.find(`[data-test='${attr}']`);\n    return wrapper;\n};","import {coreCommand} from \"rclone-api\";\nimport {addToArrayImmutable, convertToHTML} from \"../utils\";\n\n/**\n * rclone handles the execution of rclone commands in the terminal.\n * @param history       {array}\n * @param setHistory    {function(array)}\n * @param setIsLoading  {function(boolean)}\n * @returns {{exec: (function({structure: *, history?: *, cwd: *}, *): {cwd: *, history: *, structure: *})}}\n */\nconst rclone = (history, setHistory, setIsLoading) => {\n    return {\n        exec: ({structure, history, cwd}, command) => {\n            setIsLoading(true);\n            let args = [];\n            let opts = {};\n\n            for (let i in command.args) {\n                if (command.args.hasOwnProperty(i)) {\n                    if (isNaN(parseInt(i))) {\n                        opts[i] = command.args[i];\n                        continue;\n                    }\n                    let arg = command.args[i];\n                    args.push(arg);\n                }\n            }\n            coreCommand(args, opts).then(res => {\n                console.log(res);\n                setHistory(\n                    addToArrayImmutable(history, convertToHTML(res.result))\n                );\n                setIsLoading(false);\n\n            }, err=>{\n                setHistory(\n                    addToArrayImmutable(history, convertToHTML(`ERROR: ${err.message}`))\n                );\n                setIsLoading(false);\n            });\n\n            return {structure, cwd, history};\n        }\n    }\n};\n\nexport default rclone;","\nconst clearExt = (history, setHistory, setIsLoading) => {\n    return {\n        exec: ({ structure, history, cwd }, command) => {\n            return { structure, cwd, history: [] };\n        },\n    }\n};\n\nexport default clearExt;","import React, {useState} from 'react';\nimport './App.css';\nimport Terminal from \"react-bash\";\nimport rclone from \"./extenstions/rclone\";\nimport clearExt from \"./extenstions/clear\";\n\nfunction App() {\n\n    const [history, setHistory] = useState([{ value: 'Type `help` to begin' }]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const terminalExtensions = {\n        rclone: rclone(history, setHistory, setIsLoading),\n        clear: clearExt(history, setHistory, setIsLoading),\n    };\n\n    return (\n        <div style={{height: \"80vh\"}} data-test=\"appComponent\">\n            <Terminal\n                history={history}\n                theme={Terminal.Themes.DARK}\n                extensions={terminalExtensions}\n                prefix=\"rclone@default\"\n            />\n            <div className=\"StatusBar\">\n                { isLoading ? \"Loading...\" : \"Ready\" }\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}